
// parameteres are stored in a JS object
var params = {
    // Password used to decrypt DIGIPASS secrets
    password : "myPass",
    // Platform fingerprint used for the DIGIPASS secrets encryption and for the token derivation if supported, OPTIONAL but strongly recommended, no specific length, must be null if not used.
    platformFingerprint : "3352522BGYRDEZZZS",
    // Encrypted Full Activation Data, contains the activation data, MANDATORY, from 205 to 1738 hexadecimal characters
    xfad
    // Encrypted Event Reactivation Counter, contains the applications counters, OPTIONAL, only required for the reactivation of an event-based DIGIPASS, else must be null
    xerc : "111111116C7112972",
    // Activation password, used to decrypt the activation data, generated by the server, OPTIONAL, must be null if the activation data are not encrypted.
    activationPassword : "6C45D98F7EFDD207760287BFE7D66959",
    // Number used once, can be used for the activation data encryption: generated by the client (random or a time-dependent value), transmitted by to the server for the activation data encryption and provided to the DIGIPASS SDK for the decryption, OPTIONAL, can be used to avoid the generation of the same activation data successively.
    nonce : "312C2F5F5A414352734253462656442A59555C35455378325736545B335A2B2E",
    // Challenge which could used to generate the derivation code if the used crypto application is challenge/response, up to 16 valid characters
    challenge : "ABCD5678",
    // Activation password
    actPassword : "gfY2x5",
    // Server UTC time
    serverTime : 126123123123,
    // Key derived from activation password
    chsKey : "D5AA1CCB6D2C85F731108FA6015AFF7F",
    // Client private key used for session key calculation.
    clientPrivateKey : "631FF9DC447298E8276183A4EBC258A213065EF4B31E65BD31F0B748F71C219F",
    // Server public key encrypted with chsKey.
    encryptedServerPublicKey : "05718ECD7B9060343DD0CF490CA58DB9E8326D41863321F87F2B915E1473E0B4E7B3D24F0B857F04C1734CF4653E36810BA0D40BF43C6A26448D6CD428DE7C5E",
    // Concatenation of the serve and client nonces encrypted with the chsKey.
    encryptedNonces : "C6BF3C328F69F457D26864E9B96D578B",
    // XFAD for decryptActivationData
    axfad : "5CC060A5D2FC071ECB3A7AE813A496890AA62671CDBD5DAFEB19FCE22B03BDFA1AEA6B5A693B466B54248AAEE47520CDE9C1E065AA18F4A08A459CC021A6966AE956B940EB01A8B525242B10774B50164C436CE96A717C4B2242CEC0C8242780BCCDDE4F205C67E642F2826D7F9A6068A7840BB07DD464ED607821656BD51EBD521F0C09951CEA1E2CE4B147EA8EE4FCF42ED51123D2B6E6D5DD66264BCD5257B8C264F6B764E34701C149F12ED24CB880FEA069443C89B4C3C8AD68243F712B16917C83C8ED6441C8797C4F558B5E28B90BB1EFDF8F17A8A8784CBC9FE2D2774089FC43B28811BB809E3166F6CD68E5977EB142CE7F2B150DB8DD03BBB2114E5ED6167A6E098A2A69688D54FB4B10FC",
    // XERC for decryptActivationData
    axerc : "",
    // A hexadecimal string
    clientNonce : "C38C4BC8",
    // Server initial vector used for data decryption
    serverInitialVector : "E8E2AEEDC840642DB75E38AD5DC971E6",
}
function Page1_TextButton1_OnPressed(e) {
    /*
    Online activation / reactivation process
    -Extracts the activation data from the XFAD.
    -Parses the DIGIPASS settings.
    -Checks, formats and decrypts the activation data.
    -Extracts DIGIPASS secrets from the activation data and encrypts them by using a key derived from the password.
    -Updates a DIGIPASS counters if an event reactivation counter is provided.
    */
    VASCO.activateOnlineWithFingerprint({
        password : params.password,
        platformFingerprint : params.platformFingerprint,
        xfad : params.xfad,
        xerc : params.xerc,
        activationPassword : params.activationPassword,
        nonce : params.nonce,
        onSuccess : function (e) {
            alert("Activation successful.");
        },
        onError : function (e) {
            alert("Error: " + e.message);
        }
    });
}
function Page1_TextButton2_OnPressed(e) {
    /*
    generateOTP method process
    -Validates the password.
    -Generates an OTP.
    -Updates the application data (status and counters) according to the validation and generation results.
    */
    VASCO.generateOTP({
        password : params.password,
        timeShift : 0,
        platformFingerprint : params.platformFingerprint,
        onSuccess : function (e) {
            alert("OTP generated: " + e.otp);
        },
        onError : function (e) {
            alert("Error: " + e.message);
        }
    });
}
function Page1_TextButton6_OnPressed(e) {
    // Validates the password
    VASCO.validatePassword({
        password : params.password,
        platformFingerprint : params.platformFingerprint,
        onSuccess : function () {
            alert("Validation successful.");
        },
        onError : function (e) {
            alert("Error: " + e.message);
        }
    });
}
function Page1_TextButton3_OnPressed(e) {
    // Changes th password
    VASCO.changePassword({
        oldPassword : params.password,
        newPassword : "nyPass",
        platformFingerprint : params.platformFingerprint,
        onSuccess : function () {
            alert("Password change successful.");
        },
        onError : function (e) {
            alert("Error:" + e.message);
        }
    });
}
function Page1_TextButton4_OnPressed(e) {
    // Generates a derivation code to complete the activation.
    VASCO.generateDerivationCode({
        password : params.password,
        timeShift : 0,
        platformFingerprint : params.platformFingerprint,
        challenge : params.challenge,
        onSuccess : function (e) {
            alert("Derivation code generated: " + e.code);
        },
        onError : function (e) {
            alert("Error: " + e.message);
        }
    });
}
function Page1_TextButton5_OnPressed(e) {
    /*
    Gets the information below about the SDK and activation
    -status:Property used to get the version number contained in the static vector.
    -version: Property used to get the DIGIPASS status.
    -serial: Property used to get the DIGIPASS serial number.
    -passwordFatalCounter: roperty used to get the password fatal counter. This is a dynamic value extracted from the dynamic vector. It represents the password remaining number of retries
    -appEventCounter: Property used to get the crypto application counter. It represents the counter used by the application to generate the OTP if the application is event-based
    */
    VASCO.getInfo({
        onSuccess : function (e){
            alert(JSON.stringify(e.data));
        },
        onError : function (e) {
            alert("Error: " + e.message);
        }
    });
}
function Page1_TextButton7_OnPressed(e) {
    // Computes the client server time shift by using the server time and the client UTC times (timeShift = serverTime - clientTime)
    var s = VASCO.computeTimeShift({
            serverTime : params.serverTime
        });
    alert(s);
}
function Page1_TextButton9_OnPressed(e) {
    /*
    The DIGIPASS activation data is protected by an asymmetric key encryption mechanism.
    Prior to get the DIGIPASS activation data, the client application must provide the data required to protect the activation data: The client public key and nonce. The initial vector diversifying the encryption. CAUTION: This method must be used to initialize the registration data for DSAPP SDK 4.1+ and DIGIPASS for Mobile 4.1+
    */
    VASCO.initializeRegistrationDataV2({
        activationPassword : params.actPassword,
        onSuccess : function (e) {
            alert(JSON.stringify(e));
        },
        onError : function (e) {
            alert("Error: " + e.message);
        }
    });
}
function Page1_TextButton8_OnPressed(e) {
    // Validates the checksum of a shared data (activation password or authorization code).
    VASCO.validateSharedDataChecksum({
        activationPassword : params.actPassword,
        onSuccess : function (e) {
            alert("Validated.");
        },
        onError : function (e) {
            alert("Error: " + e.message);
        }
    });
}
function Page1_TextButton10_OnPressed(e) {
    // On client side, the activation data are received encrypted with the session key. It must be decrypted to be provided to the DIGIPASS SDK for the DIGIPASS instance activation. The DSAPP library will verify the integrity of the decrypted data.
    VASCO.decryptActivationData({
        chsKey : params.chsKey,
        clientPrivateKey : params.clientPrivateKey,
        encryptedServerPublicKey : params.encryptedServerPublicKey,
        encryptedNonces : params.encryptedNonces,
        xfad : params.axfad,
        xerc : params.axerc,
        clientNonce : params.clientNonce,
        serverInitialVector : params.serverInitialVector,
        onSuccess : function (e) {
            alert(JSON.stringify(e));
        },
        onError : function (e) {
            alert("Error: " + e.message);
        }
    });
}